# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs: ## Defining JOBS application
  #build:
  #  docker:
  #    # Each jobs needs an executor
  #    # The job has no executor type specified. The job should have one of the following keys specified: "macos", "machine", "docker"
  #    # Specify the version you desire here
  #    - image: circleci/php:7.4
  #  working_directory: ~/reports-circleci/app/reports
  #  steps:
  #    - checkout:
  #        path: ~/reports-circleci
  #    - run: pwd && ls -lrt
  #    - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
  #    - run: sudo docker-php-ext-install zip
  #    # Download and cache dependencies
  #    - restore_cache:
  #        keys:
  #          # "composer.lock" can be used if it is committed to the repo
  #          - v1-dependencies-{{ checksum "composer.json" }}
  #          # fallback to using the latest cache if no exact match is found
  #          - v1-dependencies-
  #    - run: composer install -n --prefer-dist
  #    - save_cache:
  #        key: v1-dependencies-{{ checksum "composer.json" }}
  #        paths:
  #          - ./vendor
  #    - persist_to_workspace: # Persist the specified paths (workspace/echo-output)
  #        # into the workspace for use in downstream job. Must be an absolute path,
  #        # or relative path from working_directory. This is a directory on the container which is
  #        # taken to be the root directory of the workspace.
  #        root: ~/reports-circleci  # ----------- Caching directory root for using on other jobs without checkout again
  #        # Must be relative path from root
  #        paths:
  #          - app/reports           # ----------- Caching specific directory on Object

  #sniffer:
  #  docker:
  #    - image: circleci/php:7.4
  #  working_directory: ~/reports-circleci
  #  steps:
  #    - attach_workspace: # Getting The workspace persisted in Build Job at . (Because we are on working_directory already)
  #          # Must be absolute path or relative path from working_directory
  #          at: .
  #    - run: ls -lrt && pwd  # ---------------------- Each command on step is independent from each others
  #    - run: sudo pear install PHP_CodeSniffer
  #    - run: cd app/reports && phpcs -v --extensions=php --standard=PSR2 src/Framework/Controller/ClassPhpCS.php

  #phpcs:
  #  docker:
  #    - image: circleci/php:7.4
  #  working_directory: ~/reports-circleci
  #  steps:
  #    - attach_workspace:
  #        # Must be absolute path or relative path from working_directory
  #        at: .
  #    - run: ls -lrt && pwd
  #    - run:
  #        command: |
  #          cd app/reports
  #          sudo apt install wget
  #          pwd && ls -lrt
  #          wget -O phpunit https://phar.phpunit.de/phpunit-9.phar
  #          chmod +x phpunit
  #          ./phpunit --version
  #          ./phpunit --bootstrap vendor/autoload.php tests

  deploy-production:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/reports-circleci
    steps:
      #- attach_workspace:
      #    at: .
      - checkout
      - run: ls -lrt && pwd
      - run: echo "deploying PRODUCTION"
      # - run: echo $ENV_FILE_PROD
      - run: pip3 install Fabric3==1.13.1.post1 && fab --version
      - add_ssh_keys:  # added firgerprint ssh key added on project
          fingerprints:
            - "86:a7:13:98:15:66:2c:fc:71:be:ce:c7:2a:8a:e9:df"
      - run: fab production deploy:env_file="$ENV_FILE_PROD",mysql_env_file="$ENV_MYSQL_FILE"

  deploy-develop:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/reports-circleci
    steps:
      - attach_workspace:
          at: .
      - run: echo "deploying DEVELOP"

## Defining WORKFLOW pipeline using jobs
workflows:
  version: 2
  build-deploy:
    jobs:
      #- build
      #- sniffer:  # Job Parallel because depends of build
      #    requires:
      #      - build
      #- phpcs:    # Job Parallel because depends of build
      #    requires:
      #      - build
      #- deploy-develop:
      #    requires:
      #      - sniffer
      #      - phpcs
      #    filters:
      #      branches:
      #        only: develop
      - deploy-production:
          #    requires:
          #  - sniffer
          #  - phpcs
          filters:
            branches:
              only: master